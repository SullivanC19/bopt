.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_ODTClassifier.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_ODTClassifier.py:


==============================
Usage example of ODTClassifier
==============================





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    DL8.5
    Model building...
    DL8.5 fitting: Solution found
    Duration of model building = 0.07299327899818309
    [[  9  25]
     [  0 129]]
    Accuracy DL8.5 on test set = 0.8466257668711656 

    DL8.5 iterative in python
    DL8.5 fitting: Solution found
    DL8.5 fitting: Solution found
    DL8.5 fitting: Solution found
    Duration of model building = 3.1486017870047363
    [[ 20  14]
     [  2 127]]
    Accuracy DL8.5 on test set = 0.901840490797546 

    DL8.5 iterative in c++
    Model building...
    DL8.5 fitting: Solution found
    Duration of model building = 2.8936889600008726
    [[ 20  14]
     [  2 127]]
    Accuracy DL8.5 on test set = 0.901840490797546 

    Default DT
    Model building...
    Duration of model building = 0.012155517004430294
    [[  9  25]
     [  0 129]]
    Accuracy default DT on test set = 0.8466257668711656 

    DL8.5 fitting: Solution found
    DL8.5 fitting: Solution found
    DL8.5 fitting: Solution found
    DL8.5 fitting: Solution found
    DL8.5 fitting: Solution found
    [0.82822086 0.87116564 0.89506173 0.86419753 0.85185185]
    [0.79754601 0.81595092 0.83333333 0.80864198 0.81481481]
    DL8.5 fitting: Solution found
    DL8.5 fitting: Solution found
    DL8.5 fitting: Solution found
    DL8.5 fitting: Solution found
    DL8.5 fitting: Solution found
    Average accuracy = 0.8140271150496099





|


.. code-block:: default

    import numpy as np
    import sys
    sys.path.insert(0, "../")
    from dl85 import ODTClassifier
    from sklearn.metrics import confusion_matrix
    from sklearn.model_selection import train_test_split
    from sklearn.metrics import accuracy_score
    from sklearn.model_selection import KFold
    from sklearn.model_selection import cross_val_score
    from sklearn.tree import DecisionTreeClassifier
    import time

    dataset = np.genfromtxt("../datasets/anneal.txt", delimiter=' ')
    X = dataset[:, 1:]
    y = dataset[:, 0]

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

    print("DL8.5")
    clf1 = ODTClassifier(max_depth=2)
    start = time.perf_counter()
    print("Model building...")
    clf1.fit(X_train, y_train)
    duration = time.perf_counter() - start
    print("Duration of model building =", duration)
    y_pred1 = clf1.predict(X_test)
    print(confusion_matrix(y_test, y_pred1))
    score1 = accuracy_score(y_test, y_pred1)
    print("Accuracy DL8.5 on test set =", score1, "\n")


    print("DL8.5 iterative in python")
    start = time.perf_counter()
    error = 0
    clf = None
    for i in range(1, 4):
        clf = ODTClassifier(max_depth=i, max_error=error)
        clf.fit(X_train, y_train)
        error = clf.error_
    duration = time.perf_counter() - start
    print("Duration of model building =", duration)
    y_pred1 = clf.predict(X_test)
    print(confusion_matrix(y_test, y_pred1))
    score1 = accuracy_score(y_test, y_pred1)
    print("Accuracy DL8.5 on test set =", score1, "\n")


    print("DL8.5 iterative in c++")
    clf1 = ODTClassifier(max_depth=3, iterative=True)
    start = time.perf_counter()
    print("Model building...")
    clf1.fit(X_train, y_train)
    duration = time.perf_counter() - start
    print("Duration of model building =", duration)
    y_pred1 = clf1.predict(X_test)
    print(confusion_matrix(y_test, y_pred1))
    score1 = accuracy_score(y_test, y_pred1)
    print("Accuracy DL8.5 on test set =", score1, "\n")


    print("Default DT")
    clf2 = DecisionTreeClassifier(max_depth=3)
    start = time.perf_counter()
    print("Model building...")
    clf2.fit(X_train, y_train)
    duration = time.perf_counter() - start
    print("Duration of model building =", duration)
    y_pred2 = clf2.predict(X_test)
    print(confusion_matrix(y_test, y_pred2))
    score2 = accuracy_score(y_test, y_pred2)
    print("Accuracy default DT on test set =", score2, "\n")


    clf3 = ODTClassifier(max_depth=3)
    scores = cross_val_score(clf3, X, y, cv=5)
    print(scores)


    clf4 = DecisionTreeClassifier(max_depth=3)
    scores = cross_val_score(clf4, X, y, cv=5)
    print(scores)


    kf = KFold(n_splits=5, random_state=42, shuffle=True)
    accuracies = []
    for train_index, test_index in kf.split(X):
        data_train = X[train_index]
        target_train = y[train_index]
        data_test = X[test_index]
        target_test = y[test_index]

        clf = ODTClassifier()
        clf.fit(data_train, target_train)

        preds = clf.predict(data_test)

        # accuracy for the current fold only
        accuracy = accuracy_score(target_test,preds)
        accuracies.append(accuracy)

    # this is the average accuracy over all folds
    average_accuracy = np.mean(accuracies)
    print("Average accuracy =", average_accuracy)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  21.821 seconds)


.. _sphx_glr_download_auto_examples_plot_ODTClassifier.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ODTClassifier.py <plot_ODTClassifier.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ODTClassifier.ipynb <plot_ODTClassifier.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
